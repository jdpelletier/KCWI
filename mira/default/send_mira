#! /kroot/rel/default/bin/kpython

import socket   #for sockets
import sys  #for exit
import argparse
import time

# Parsing arguments
description = "Send commands to a Mira listening server"
parser = argparse.ArgumentParser(description=description)
parser.add_argument('server',nargs="?",default=None, help='server')
parser.add_argument('port',nargs="?",default=50010, help='port')

def recv_timeout(the_socket,timeout=2):
    #make socket non blocking
    the_socket.setblocking(0)
     
    #total data partwise in an array
    total_data=[];
    data='';
     
    #beginning time
    begin=time.time()
    while 1:
        #if you got some data, then break after timeout
        if total_data and time.time()-begin > timeout:
            break
         
        #if you got no data at all, wait a little longer, twice the timeout
        #elif time.time()-begin > timeout*5:
        #    break
         
        #recv something
        try:
            data = the_socket.recv(8192)
            if data:
                total_data.append(data)
                #change the beginning time for measurement
                begin=time.time()
            else:
                #sleep for sometime to indicate a gap
                time.sleep(0.1)
        except:
            pass
     
    #join all parts to make final string
    return ''.join(total_data)


if __name__ == '__main__':
    args = parser.parse_args()
    try:
        #create an AF_INET, STREAM socket (TCP)
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    except socket.error, msg:
        print 'Failed to create socket. Error code: ' + str(msg[0]) + ' , Error message : ' + msg[1]
        sys.exit();
 
    #print 'Socket Created'
 
    host = args.server
    if host==None:
        sys.stdout.write("Server is not specified\n")
        sys.exit(1)
    port = int(args.port)
 
    try:
        remote_ip = socket.gethostbyname( host )
 
    except socket.gaierror:
        #could not resolve
        print 'Hostname could not be resolved. Exiting'
        sys.exit()
    
    #print 'Ip address of ' + host + ' is ' + remote_ip
 
    #Connect to remote server
    s.connect((remote_ip , port))
 
    #print 'Socket Connected to ' + host + ' on ip ' + remote_ip
 
    #Send some data to remote server
    for message in sys.stdin:
 
        try :
            #Set the whole string
            s.sendall(str(message))
        except socket.error:
            #Send failed
            print 'Send failed'
            sys.exit()
 
    #get reply and print
    print recv_timeout(s)

    s.close()

    #print 'Message send successfully'
