#!/bin/tcsh
#+
# KCWI library of scripts
#
# NAME
#	help -- print documentation for a KCWI script, or list all scripts
#
# SYNOPSIS
#	help [-s] [cmd]
#
# DESCRIPTION
#	With no arguments, print an alphabetically-sorted list of the
#	brief descriptions for all KCWI scripts.  With one argument,
#	determine whether the given argument represents an alias, a
#	script, or a Unix command, and print out any available
#	documentation. 
#
# ARGUMENTS
#	cmd = name of command or script to describe
#
# OPTIONS
#	-s = source; print full source code for script instead of 
#		just the help block
#
# EXAMPLES
#	1) list all available scripts:
#		help
#
#	2) get help on the "goi" script:
#		help goi
#
#	3) get help on the Unix "find" command:
#		help find
#
#	3) view the full source code for the "wfi" command:
#		help -s wfi
#
# ENVIRONMENT VARIABLES
#	KCWI_PROC_DIR
#
# FILES
#	Parses various script files.
#
# SERVERS & KEYWORDS
#
# SCRIPTS CALLED
#
# EXIT STATUS
#	0 - normal exit, no error
#	1 - script aborted by an interrupt
#	2 - syncheck error
#	3 - error parsing command line input
#	other errors...
#
# SEE ALSO
#-
# Note:
#	In order to ensure that the path and all aliases are properly
#	defined, this script uses "tcsh" instead of "csh" and also
#	does NOT use "-f" to avoid reading the .cshrc file
#
# Modification history:
#	2014-Feb-14	JDN	Adapted for KCWI
#	2011-May-20	GDW	Adapted for MOSFIRE
#	2003-Aug-27	GDW	Added "-s" option
#	2000-Jan-01	GDW	Original version (DEIMOS)
#-----------------------------------------------------------------------

# set defaults...
set source = 0

# no arg ==> list brief description of all commands...
if ( $#argv == 0 ) then

  echo "Listing all available KCWI scripts:"
  echo $KCWI_PROC_DIR
  
  # get list of all scripts which are executable plain files
  # NOT ending in "~", cat the contents, extract description lines,
  # and sort the output...
    gawk '/^#.* -- .*/{i=gsub("^#","");printf "%-12s", $1;$1="";print;nextfile}'  `/usr/bin/find $KCWI_PROC_DIR -perm -555 -type f \! -name '*~'` \
    | sort | more

  exit
endif

# parse flags...
while ( $#argv > 0 )

  # check for source flag...
  if ( "$1" =~ \-s* ) then
    set source = 1
    shift
    continue
  endif

  # exit flag check if no flags remain...
  break

end

if ( $#argv > 1 ) then
  echo "Usage: help [-s] [cmd]"
  exit 1
endif

# 1 arg ==> get help for that command...
set cmd = $1
set buf = `which $cmd`

# test whether output indicates alias, error, or script...
set error = 0
set alias = `echo "$buf" | fgrep "aliased to" >& /dev/null ; echo $status`
if ( $alias ) set error = `echo "$buf" | fgrep "not found" >& /dev/null ; echo $status`
if ( $error ) set script = `find $buf -ls | fgrep /scripts >& /dev/null ; echo $status`

# give appropriate feedback to customer...
if ( $alias == 0 ) then
  echo "$buf"
  exit 0
else if ( $error == 0 ) then
  printf "[$cmd] ERROR: command $cmd not found\n"
  exit 2
else if ( $script == 0 ) then

    # NOTE: use find -ls to resolve symlinks...
    # set file = `find $buf -ls | gawk '{print $NF}'`
    set file = $buf

    # check for source code option...
    if ( $source ) then
	more $file
    else
	gawk 'NR==1{buf= " Help for " FILENAME ": ";l=length(buf);n=(80-l-2)/2;d="";if(n>0){for(i=1;i<=n;i++){d=d "-"}};printf "%s %s %s\n\n", d, buf, d}\
/^\#\+/{ok=1;next}/^\#\-/{exit}ok==1{i=gsub("^#","");print}' $file | more
    endif
else
  man $cmd
endif
