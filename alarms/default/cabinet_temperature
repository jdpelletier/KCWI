#! /kroot/rel/default/bin/kpython
    
import ktl
import argparse

from KeckAlarm.GenericMonitor import AlarmHandler
 
description = "Alarm handler for KCWI electronics cabinet temperature"
parser = argparse.ArgumentParser(description=description)
parser.add_argument('action',help='action to be performed (enable,disable,snooze,status)',\
                    choices=['enable','disable','snooze','status'],nargs='?')
parser.add_argument('minutes',help='minutes to snooze for',nargs='?',default=0)
parser.add_argument('-debug',help='Forces verbose output on screen. Not recommended for cronjobs',action='store_true',required=False, default=False)


# Instantiate the class: create the alarm with a name
CabinetTemp = AlarmHandler('temperature')

# the set temperature comes from a keyword, and at this point we already know 
# that the service is operational
CabinetTemp.whoFrom = 'kcwirun@keck.hawaii.edu'
CabinetTemp.whoWarning = 'kcwiwarnings@keck.hawaii.edu; matmat@caltech.edu'
CabinetTemp.whoInfo = 'kcwiinfo@keck.hawaii.edu; matmat@caltech.edu'
#CabinetTemp.whoWarning = 'luca.kilohi@gmail.com'
#CabinetTemp.whoInfo = 'luca.kilohi@gmail.com'
CabinetTemp.host = 'kcwiserver'
CabinetTemp.user = 'kcwirun'

# EMAILS 

# server is not running
CabinetTemp.serviceNotRunning['subject'] = "Warning: The KT2S service is not running"
CabinetTemp.serviceNotRunning['body'] = \
           """This is an info email that the KT2S server is not running.

           1. Log into kcwiserver as user kcwi
           2. Type the following command:
               "ctx" to determine the state of the instrument servers
           3. Run kcwi restart servers  to restart servers."""

# alarm has been manually disabled, and more than 1 day has passed
CabinetTemp.alarmsDisabled['subject'] = "Info: The KT2S alarms are currently disabled"
CabinetTemp.alarmsDisabled['body'] = \
            """This is just a friendly reminder that alarms for the KCWI cabinet 
            temperatures have been disabled by user request.  This message
            will be sent out daily until alarms are re-enabled.  Follow
            these steps to re-enable temperature monitoring:

            1. Log into kcwiserver as user "kcwi"
            2. Type the following command:
                cabinet_temperature enable"""

# server is running, but the keyword is not available or has invalid value
CabinetTemp.missingValue['subject'] = "Warning: no KCWI detector temperature is available"
CabinetTemp.missingValue['body'] = \
            """The KT2S service is not returning valid temperature readings.
            
            The monitor script will email alarms every 10 minutes until the 
            situation is corrected or the alarms are disabled."""

# real alarm: the value is out or range
CabinetTemp.raiseAlarm['subject'] = "WARNING: KCWI Electronic Cabinet temperature is out of range"
CabinetTemp.raiseAlarm['body'] = \
            """ The KCWI Electronic Cabinet monitor has detected that the temperature is out of range.

            Check the cabinet temperatures, and monitor succeeding emails for warming or cooling trends.

            This message will be sent at 10 minutes intervals until the problem is corrected or the 
            alarms are disabled."""

# this string is added to the log file afte the date and before the value, as in 
# <date> <time> <tkloggerString> <keyword=value>
CabinetTemp.tkloggerString=" TempOutOfRange cabinet temp now "

# directory, file names for the logfile and for the status file
CabinetTemp.setLogInfo('/kroot/var/log/monitors','cabinetlog','.cabinetlog_status')


# parsing arguments
args = parser.parse_args()
if args.action:
    CabinetTemp.action(args.action, args.minutes)
if args.debug:
    CabinetTemp.debug = True

# is the alarm enable, disables, snoozed?
CabinetTemp.checkStatus()

# setup communication with the server
CabinetTemp.setAndCheckService('kt2s')

# define the expected value reading from a keyword
#import ktl
#kt2s = ktl.cache('kt2s')
#setTemp = float(kt2s['trgtmp1'].read())
#CabinetTemp.targetValue = setTemp

# other option: setup expected value manually
CabinetTemp.units = "C"     # valid values are C or K
CabinetTemp.targetValue = 20
CabinetTemp.minValue = 0 # setTemp-5
CabinetTemp.maxValue = 25 # setTemp+5

# keyword to monitor
CabinetTemp.valueKeyword = 'tmp7'
# if keyword cannot be read for longer than this time, send out a warning (minutes)
CabinetTemp.maxDelay = 10

# main program
CabinetTemp.mainCheck()
 
