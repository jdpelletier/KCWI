#!/bin/csh -f
#+
# KCWI library of scripts
#
# NAME
#       kcwiInit - Initialize the instrument for an observing session
# 
# SYNOPSIS
#       kcwiInit
#
# DESCRIPTION
#	Reset KCWI options for a new observer. Actions include:
#	- define OBSERVER keyword
#	- define OUTDIR keyword and validate
#	- reset FRAMENO as desired
#       - reset instrument and camera keywords
#	- allow optional homing of motors
#	- reset detector to standard values
#	- reset other keywords to fiducial values
#	- verify available disk space on OUTDIR disk
#
# ARGUMENTS
#       none
#
# OPTIONS
#       none
#
# EXAMPLES
#	1) Initialize KCWI:
#		kcwiInit
#       
# ENVIRONMENT VARIABLES
#
# FILES
#
# SERVERS & KEYWORDS
#
# SCRIPTS CALLED
#
# EXIT STATUS
#	0 - normal exit, no error
#	1 - script aborted by an interrupt
#
# Modification History:
#	2012-apr-02	MK	Original version
#	2012-nov-27	MK	removed make dcs real (it causes issues)
#	2012-Jan-24	GDW	Add code to save observer params
#       2013-Apr-11     MK      Added default log levels
#	2013-Apr-28	GDW	Fix code to set frame number
#       2013-Dec-29     MK      Removed the observer entry and updated the 
#                               frame number to work correctly if input 
#                               value is negative. 
#	2014-May-10	GDW	Add reset of NODE and NODN
#       2015-Jan-09     MK      Auto create a data dir. No longer prompts 
#                               user to keep the same data dir. Better for 
#                               Koa and removes a step in the script.
#       2016-Jul-13     LR      Modified to work with KCWI
#------------------------------------------------------------------------------

#JOHNEDIT
#TODO Future imports
##! /kroot/rel/default/bin/kpython

#from KCWI import PowerInit, Calibrations, Blue
#from KCWI.Util import sleepdots
#import ktl
#import sys
#import subprocess


# set defaults...
set cmd = `basename $0`
set usage = "Usage: $cmd"

# verify args...
if ( $#argv > 0 ) then
  printf "$usage\n\a"
  exit 1
endif

# verify that the user really wants to run the script...
print(
'''
Welcome to the KCWI initialization script. You should ALWAYS run 
this script at the start of any observing nights of your run to 
undo any changes that the previous observer made to KCWI and to 
re-initialize hardware and software.
'''
)
response = str(input( "Do you want to continue running the setup script? (y/n) [y]: "))
if response in ['n', 'N']:
    exit

#set response = "$<"
#if( "$response" != "" && $response !~ y* && $response !~ Y* ) exit




# turn off the DCS simulator...
#make_dcs_real

# Unlock all servers
#JOHNEDIT
#TODO This script is not in python yet
#Check subprocess syntax
subprocess.run(["kcwiUnlockAllServers"])

if ( $status ) then
    echo "Cannot start software"
    # exit(1)
    # echo "OVERRIDE!!!! Starring anyway"
endif


# define the observer.  Note the use of parens and quotes to deal with 
# multiple-word values, and of "noglob" to allow special
# characters in names... 
set noglob
#JOHNEDIT TODO figure this out
def = ( `show -terse -service kbds observer` )
observer = str(input("Enter names of observing team members [" + def + "]: "))
#set observer = "$<"

if observer != "":
    #JOHNEDIT
    #modify -s kbds observer = "$observer"
    obs = ktl.cache("kbds", "observer")
    obs.write(observer)


# reset the instrument and camera keywords for the blue detector
#JOHNEDIT
#modify -s kbds INSTRUMENT="KCWI"
#modify -s kbds CAMERA="BLUE"
instrument = ktl.cache("kbds", "INSTRUMENT")
camera = ktl.cache("kbds", "CAMERA")
instrument.write("KCWI")
camera.write("BLUE")

# define the output directory...
#JOHNEDIT
#set outdir = `show -terse -service kbds outdir`
otd = ktl.cache("kbds", "outdir")
outdir = otd.read()

print( "Output directory is currently set to " + outdir)

# reset the disk list on the blue server
#JOHNEDIT
#modify -s kbds disklist="/s/sdata1400"
disklist = ktl.cache("kbds", "disklist")
disklist.write("/s/sdata1400")
# if this is a re-run of the script, default is NO change...
#if ( $?rerun ) then
#    set default = n
#else
#    set default = y
#endif

def = y
yesno = str(input("Do you want to create a new data directory? (y/n) [" + def + "]: "))
#set yesno = "$<"

# no response ==> use default...
if yesno == "":
    yesno = def


# positive response ==> create new directory...
if yesno in ['y', 'Y']:
    #TODO find newdir
    newdir

# set the frame number; default is to use next number in sequence for
# current output directory...
set default = `nextfileb`
printf "Enter starting blue image number [$default]: "
set frameno = "$<"
if ( "$frameno" == "" ) then
    set frameno = $default
endif
if ( $frameno < 0 ) then
    set frameno = 0
endif
setframeb $frameno
set frameroot = `framerootb`
echo "Changing frameroot to $frameroot"
#JOHNEDIT
#modify -s kbds outfile=`framerootb`
outfile = ktl.cache("kbds", "outfile")
outfile.write(`framerootb`)

### FOCAL PLANE CAMERA
set default = `nextfilefpc`
printf "Enter starting focal plane camera image number [$default]: "
set frameno = "$<"
if ( "$frameno" == "" ) then
    set frameno = $default
endif
if ( $frameno < 0 ) then
    set frameno = 0
endif
setframefpc $frameno
#@ frameroot = `framerootfpc`

#JOHNEDIT
#TODO check if second outfile syntax is right
#modify -s kfcs outfile=`framerootfpc`
outfile2 = ktl.cache("kfcs", "outfile")
outfile2.write(`framerootfpc`)

#@ default = `nextfiler`
#printf "Enter starting red image number [$default]: "
#set frameno = "$<"
#if ( "$frameno" == "" ) then
#    @ frameno = $default
#endif
#if ( $frameno < 0 ) then
#    @ frameno = 0
#endif
#setframer $frameno
#@ frameroot = `framerootr`
#modify -s kbds outfile = $frameroot


#JOHNEDIT
#set ccdpower = `show -s kbds -terse ccdpower`
ccdp = ktl.cache("kbds", "ccdpower")
ccdpower = ccdp.read()

if ccdpower == "1":
    print("The CCD power is already on")

else
    # reset detector...
    def = "y"
    yesno = str(input("Do you want to turn on power to the Blue CCD? (y/n) [" + def "]: "))

    # no response ==> use default...
    if yesno == "":
        yesno = def

    if yesno in ['y', 'Y']
        print("Turning on power to Blue CCD")

        #JOHNEDIT
        #modify -s kbds ccdpower = 1
        ccdpower = ktl.cache("kbds", "ccdpower")
        ccdpower.write(1)

        #JOHNEDIT added python script
        #sleepdots 5
        sleepdots(5)


def = "y"
yesno = str(input("Do you want to reset the Blue CCD to default settings ? (y/n) [" + def + "]: "))

    # no response ==> use default...
if yesno == "":
    yesno = def

    # positive response ==> create new directory...
if yesno in ['y', 'Y']
    print("Resetting detector parameters to their nominal values...")
    #JOHNEDIT
    #kcwiSetBlueDetectorDefault
    Blue.ampmodeb(ampmode=9)
    Blue.gainmulb(gainmul=10)
    Blue.ccdmodeb(ccdmode=0)
    Blue.binningb(binning='2,2')
    Blue.autoshutb(mode=1)
    print("Default detector parameters have been set")

#JOHNEDIT
#set magiqPower = `show -s kp1s -terse pwstat2`
mgqp = ktl.cache("kpls"," pwstat2")
magiqPower = mgqp.read()

if magiqPower == "1":
    print("Magiq power is already on")
else
    def = "y"
    yesno = str(input("Do you want to turn on power to the Magiq Guider? (y/n) [" + def "]: "))

    # no response ==> use default...
    if yesno == "":
	yesno = def

    if yesno in ['y', 'Y']:
        print("Turning on power to Magiq Guider")

    #JOHNEDIT
    #kcwiPower 1 2 on
    PowerInit.kcwiPower(1, 2, "on")
    #JOHNEDIT added python script
    #sleepdots 5
    sleepdots(5)



#kcwiSetRedDetectorDefault

# reset other keywords...
#printf "Resetting other keywords to fiducial values...\n"
#set_state -v <<EOF
#mosfire OBJECT Startup
#mosfire NODE   0.
#mosfire NODN   0.
#EOF

#printf "Savings current settings to $settings\n"
#set outdir = `show -terse -service mosfire outdir`
#set observer = ( `show -terse -service mosfire observer` )
#if ( -e $settings ) then
#    \rm $settings
#    if ( $status != 0 ) then
#	printf "[$cmd] ERROR: unable to remove existing settings file $settings\n\a"
#	exit 1
#    endif
#endif

#cat > $settings <<EOF
## KCWI initial settings file
#mosfire  OBSERVER $observer
#mosfire  OUTDIR   $outdir
## generator: $0
## generated: `date`
#EOF

# finished...
print(
'''

------------------------------------------------------------------------
                    Instrument initialization completed
------------------------------------------------------------------------

'''
)
exit
